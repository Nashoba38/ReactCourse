{"version":3,"sources":["util/clientID.js","util/Spotify.js","components/Track.js","components/JkMusicPlayer.js","components/Loading.js","components/TrackList.js","components/AlbumPage.js","components/SearchBar.js","components/AlbumCard.js","components/AlbumList.js","components/SearchPage.js","components/ArtistCard.js","components/ArtistList.js","components/ArtistPage.js","components/App.js","serviceWorker.js","index.js","util/convertMS.js"],"names":["module","exports","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","console","log","accessUrl","clientId","Track","track","index","playTrack","role","className","onClick","name","convertMS","duration_ms","audioList1","join","singer","cover","musicSrc","Promise","resolve","audioList2","options","audioLists","defaultPlayIndex","theme","bounds","clearPriorAudioLists","autoPlayInitLoadPlayList","preload","glassBg","remember","remove","defaultPosition","top","left","playModeText","order","orderLoop","singleLoop","shufflePlay","openText","closeText","checkedText","unCheckedText","notContentText","panelTitle","defaultPlayMode","mode","once","autoPlay","toggleMode","showMiniModeCover","showMiniProcessBar","drag","seeked","controllerTitle","showProgressLoadBar","showPlay","showReload","showDownload","showPlayMode","showThemeSwitch","showLyric","extendsContent","defaultVolume","playModeShowTime","loadAudioErrorPlayNext","autoHiddenCover","onAudioDownload","audioInfo","onAudioPlay","onAudioPause","onAudioSeeked","onAudioVolumeChange","currentVolume","onAudioEnded","onAudioAbort","e","onAudioProgress","onAudioReload","onAudioLoadError","onThemeChange","onAudioListsChange","currentPlayId","onAudioPlayTrackChange","onPlayModeChange","playMode","onModeChange","onAudioListsPanelChange","panelVisible","onAudioListsDragEnd","fromIndex","endIndex","onAudioLyricChange","lineNum","currentLyric","getContainer","document","body","getAudioInstance","audio","JkMusicPlayer","props","state","params","onAddAudio","data","Date","now","setState","swal","onChangeToFirstAudioList","onChangeToSecondAudioList","onAutoPlayMode","onAutoPlayInitLoadPlayList","onShowGlassBg","onChangeKey","onDrag","onToggleMode","onSeeked","key","createRandomNum","changePlayIndex","playIndex","length","this","audioList","oldProps","newProps","React","PureComponent","Loading","TrackList","tracks","imageAlbum","useState","setAudioList","useEffect","playList","map","artists","artist","image","mp3","JSON","stringify","renderedTracks","withRouter","id","albumInfo","setAlbumInfo","albumArtists","setAlbumArtists","albumTracks","setAlbumTracks","getAlbumById","getAlbumTracksById","fetch","headers","Authorization","then","response","json","jsonResponse","filteredAlbumData","release_date","substring","total_tracks","images","url","pupularity","popularity","uri","catch","error","items","filteredAlbumTracks","preview_url","type","album","renderedArtists","to","src","totalMS","reduce","acc","totalAlbumPlayTime","SearchBar","search","placeholder","wtx-context","onChange","target","value","AlbumCard","AlbumList","renderedAlbums","albums","SearchPage","searchResult","setSearchResult","term","filteredAlbums","ArtistCard","renderedGenres","genres","genre","followers","ArtistList","artistInfo","setArtistInfo","topTracks","setTopTracks","relatedArtists","setRelatedArtists","getArtistById","getArtistTopTracksById","getRelatedArtists","filteredArtistData","total","filteredArtistTopTracksData","filteredRelatedArtists","App","exact","path","component","AlbumPage","ArtistPage","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message","milliseconds","hours","absoluteHours","Math","floor","h","minutes","absoluteMinutes","m","seconds","absoluteSeconds","s"],"mappings":"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","file":"static/js/main.036cfaa8.chunk.js","sourcesContent":["const clientId = 'a199bc0a86bb4c6db1efa3f061bd8efc';\r\nmodule.exports = clientId;\r\n","import clientId from './clientID';\r\n\r\nconst redirectUri = 'https://blackbird38.github.io/ReactCourse/';\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    // check for an access token match\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n\r\n      // this clears the parameters, allowing us to grab  a new access token when it expires\r\n      window.setTimeout(() => (accessToken = ''), expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/');\r\n      console.log(accessToken);\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n};\r\n\r\nexport default Spotify;\r\n","import React from 'react';\r\nimport convertMS from '../util/convertMS';\r\n\r\nconst Track = ({ track, index, playTrack }) => {\r\n  return (\r\n    <div\r\n      role=\"listitem\"\r\n      className=\"item track-list\"\r\n      onClick={() => {\r\n        playTrack(track);\r\n      }}\r\n    >\r\n      <div className=\"track-number\">{index + 1}</div>\r\n      <div className=\"content\">\r\n        <a className=\"header track-name\">{track.name}</a>\r\n        <a className=\"description\">{convertMS(track.duration_ms)}</a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Track;\r\n","import React from 'react';\r\nimport swal from 'sweetalert';\r\nimport ReactJkMusicPlayer from 'react-jinke-music-player';\r\nimport FaHeadphones from 'react-icons/lib/fa/headphones';\r\nimport { createRandomNum } from 'react-jinke-music-player/lib/utils';\r\nimport 'react-jinke-music-player/assets/index.css';\r\nimport './JkMusicPlayer.css';\r\n\r\nconst lyric = [].join('\\n');\r\n\r\nconst audioList1 = [\r\n  {\r\n    name: 'Despacito',\r\n    singer: 'Luis Fonsi',\r\n    cover:\r\n      'http://res.cloudinary.com/alick/image/upload/v1502689731/Despacito_uvolhp.jpg',\r\n    musicSrc: () => {\r\n      return Promise.resolve(\r\n        'http://res.cloudinary.com/alick/video/upload/v1502689683/Luis_Fonsi_-_Despacito_ft._Daddy_Yankee_uyvqw9.mp3'\r\n      );\r\n    },\r\n  },\r\n  {\r\n    name: 'Bedtime Stories',\r\n    singer: 'Jay Chou',\r\n    cover:\r\n      'http://res.cloudinary.com/alick/image/upload/v1502375978/bedtime_stories_bywggz.jpg',\r\n    musicSrc:\r\n      'http://res.cloudinary.com/alick/video/upload/v1502375674/Bedtime_Stories.mp3',\r\n  },\r\n];\r\n\r\nconst audioList2 = [\r\n  {\r\n    name: 'Despacito',\r\n    singer: 'Luis Fonsi',\r\n    cover:\r\n      'http://res.cloudinary.com/alick/image/upload/v1502689731/Despacito_uvolhp.jpg',\r\n    musicSrc: () => {\r\n      return Promise.resolve(\r\n        'http://res.cloudinary.com/alick/video/upload/v1502689683/Luis_Fonsi_-_Despacito_ft._Daddy_Yankee_uyvqw9.mp3'\r\n      );\r\n    },\r\n  },\r\n  {\r\n    name: 'Bedtime Stories',\r\n    singer: 'Jay Chou',\r\n    cover:\r\n      'http://res.cloudinary.com/alick/image/upload/v1502375978/bedtime_stories_bywggz.jpg',\r\n    musicSrc:\r\n      'http://res.cloudinary.com/alick/video/upload/v1502375674/Bedtime_Stories.mp3',\r\n  },\r\n  {\r\n    name: 'Dorost Nemisham',\r\n    singer: 'Sirvan Khosravi',\r\n    cover:\r\n      'https://res.cloudinary.com/ehsanahmadi/image/upload/v1573758778/Sirvan-Khosravi-Dorost-Nemisham_glicks.jpg',\r\n    musicSrc: () => {\r\n      return Promise.resolve(\r\n        'https://res.cloudinary.com/ehsanahmadi/video/upload/v1573550770/Sirvan-Khosravi-Dorost-Nemisham-128_kb8urq.mp3'\r\n      );\r\n    },\r\n  },\r\n];\r\n\r\nconst options = {\r\n  //audio lists model\r\n  audioLists: audioList1,\r\n\r\n  //default play index of the audio player  [type `number` default `0`]\r\n  defaultPlayIndex: 0,\r\n\r\n  //if you want dynamic change current play audio you can change it [type `number` default `0`]\r\n  // playIndex: 0,\r\n\r\n  //color of the music player theme    [ type `string: 'light' or 'dark'  ` default 'dark' ]\r\n  theme: 'dark',\r\n\r\n  // Specifies movement boundaries. Accepted values:\r\n  // - `parent` restricts movement within the node's offsetParent\r\n  //    (nearest node with position relative or absolute), or\r\n  // - a selector, restricts movement within the targeted node\r\n  // - An object with `left, top, right, and bottom` properties.\r\n  //   These indicate how far in each direction the draggable\r\n  //   can be moved.\r\n  bounds: 'body',\r\n\r\n  // Replace a new playlist with the first loaded playlist\r\n  // instead of adding it at the end of it.\r\n  // [type `boolean`, default `false`]\r\n  clearPriorAudioLists: false,\r\n\r\n  // Play your new play list right after your new play list is loaded turn false.\r\n  // [type `boolean`, default `false`]\r\n  autoPlayInitLoadPlayList: true,\r\n\r\n  //Whether to load audio immediately after the page loads.  [type `Boolean | String`, default `false`]\r\n  //\"auto|metadata|none\" \"true| false\"\r\n  preload: true,\r\n\r\n  //Whether the player's background displays frosted glass effect  [type `Boolean`, default `false`]\r\n  glassBg: false,\r\n\r\n  //The next time you access the player, do you keep the last state  [type `Boolean` default `false`]\r\n  remember: false,\r\n\r\n  //The Audio Can be deleted  [type `Boolean`, default `true`]\r\n  remove: true,\r\n\r\n  //audio controller initial position    [ type `Object` default '{top:0,left:0}' ]\r\n  defaultPosition: {\r\n    top: 300,\r\n    left: 120,\r\n  },\r\n\r\n  // play mode text config of the audio player\r\n  playModeText: {\r\n    order: 'Play all once',\r\n    orderLoop: 'Repeat all',\r\n    singleLoop: 'Repeat 1',\r\n    shufflePlay: 'Shuffle',\r\n  },\r\n\r\n  //audio controller open text  [ type `String | ReactNode` default 'open']\r\n  openText: '打开',\r\n\r\n  //audio controller close text  [ type `String | ReactNode` default 'close']\r\n  closeText: '关闭',\r\n\r\n  //audio theme switch checkedText  [ type `String | ReactNode` default '-']\r\n  checkedText: '开',\r\n\r\n  //audio theme switch unCheckedText [ type `String | ReactNode` default '-']\r\n  unCheckedText: '关',\r\n\r\n  // audio list panel show text of the playlist has no songs [ type `String` | ReactNode  default 'no music']\r\n  notContentText: 'No tracks',\r\n\r\n  panelTitle: 'Playlist',\r\n\r\n  defaultPlayMode: 'order',\r\n\r\n  //audio mode        mini | full          [type `String`  default `mini`]\r\n  mode: 'full',\r\n\r\n  /**\r\n   * [ type `Boolean` default 'false' ]\r\n   * The default audioPlay handle function will be played again after each pause, If you only want to trigger it once, you can set 'true'\r\n   */\r\n  once: true,\r\n\r\n  //Whether the audio is played after loading is completed. [type `Boolean` default 'true']\r\n  autoPlay: true,\r\n\r\n  //Whether you can switch between two modes, full => mini  or mini => full   [type 'Boolean' default 'true']\r\n  toggleMode: true,\r\n\r\n  //audio cover is show of the \"mini\" mode [type `Boolean` default 'true']\r\n  showMiniModeCover: true,\r\n\r\n  //audio playing progress is show of the \"mini\"  mode\r\n  showMiniProcessBar: false,\r\n\r\n  //audio controller is can be drag of the \"mini\" mode     [type `Boolean` default `true`]\r\n  drag: true,\r\n\r\n  //drag the audio progress bar [type `Boolean` default `true`]\r\n  seeked: true,\r\n\r\n  //audio controller title [type `String | ReactNode`  default <FaHeadphones/>]\r\n  controllerTitle: <FaHeadphones />,\r\n\r\n  //Displays the audio load progress bar.  [type `Boolean` default `true`]\r\n  showProgressLoadBar: true,\r\n\r\n  //play button display of the audio player panel   [type `Boolean` default `true`]\r\n  showPlay: true,\r\n\r\n  //reload button display of the audio player panel   [type `Boolean` default `true`]\r\n  showReload: true,\r\n\r\n  //download button display of the audio player panel   [type `Boolean` default `true`]\r\n  showDownload: false,\r\n\r\n  //loop button display of the audio player panel   [type `Boolean` default `true`]\r\n  showPlayMode: true,\r\n\r\n  //theme toggle switch  display of the audio player panel   [type `Boolean` default `true`]\r\n  showThemeSwitch: false,\r\n\r\n  //lyric display of the audio player panel   [type `Boolean` default `false`]\r\n  showLyric: true,\r\n\r\n  //Extensible custom content       [type 'Array' default '[]' ]\r\n  extendsContent: [''],\r\n\r\n  //default volume of the audio player [type `Number` default `100` range `0-100`]\r\n  defaultVolume: 100,\r\n\r\n  //playModeText show time [type `Number(ms)` default `700`]\r\n  playModeShowTime: 600,\r\n\r\n  //Whether to try playing the next audio when the current audio playback fails [type `Boolean` default `true`]\r\n  loadAudioErrorPlayNext: true,\r\n\r\n  // Auto hide the cover photo if no cover photo is available [type `Boolean` default `false`]\r\n  autoHiddenCover: true,\r\n\r\n  //Music is downloaded handle\r\n  onAudioDownload(audioInfo) {\r\n    //console.log('audio download', audioInfo);\r\n  },\r\n\r\n  //audio play handle\r\n  onAudioPlay(audioInfo) {\r\n    //console.log('audio playing', audioInfo);\r\n  },\r\n\r\n  //audio pause handle\r\n  onAudioPause(audioInfo) {\r\n    // console.log('audio pause', audioInfo);\r\n  },\r\n\r\n  //When the user has moved/jumped to a new location in audio\r\n  onAudioSeeked(audioInfo) {\r\n    // console.log('audio seeked', audioInfo);\r\n  },\r\n\r\n  //When the volume has changed  min = 0.0  max = 1.0\r\n  onAudioVolumeChange(currentVolume) {\r\n    //console.log('audio volume change', currentVolume);\r\n  },\r\n\r\n  //The single song is ended handle\r\n  onAudioEnded(audioInfo) {\r\n    // swal('Audio is ended!', '', 'success')\r\n    //console.log('audio ended', audioInfo);\r\n  },\r\n\r\n  //audio load abort The target event like {...,audioName:xx,audioSrc:xx,playMode:xx}\r\n  onAudioAbort(e) {\r\n    //console.log('audio abort', e);\r\n  },\r\n\r\n  //audio play progress handle\r\n  onAudioProgress(audioInfo) {\r\n    // console.log('audio progress',audioInfo);\r\n  },\r\n\r\n  //audio reload handle\r\n  onAudioReload(audioInfo) {\r\n    //console.log('audio reload:', audioInfo);\r\n  },\r\n\r\n  //audio load failed error handle\r\n  onAudioLoadError(e) {\r\n    //console.error('audio load err', e);\r\n  },\r\n\r\n  //theme change handle\r\n  onThemeChange(theme) {\r\n    //console.log('theme change:', theme);\r\n  },\r\n\r\n  onAudioListsChange(currentPlayId, audioLists, audioInfo) {\r\n    // console.log('[currentPlayId] audio lists change:', currentPlayId);\r\n    //console.log('[audioLists] audio lists change:', audioLists);\r\n    //console.log('[audioInfo] audio lists change:', audioInfo);\r\n  },\r\n\r\n  onAudioPlayTrackChange(currentPlayId, audioLists, audioInfo) {\r\n    //console.log('audio play track change:', currentPlayId, audioLists, audioInfo);\r\n  },\r\n\r\n  onPlayModeChange(playMode) {\r\n    // console.log('play mode change:', playMode);\r\n  },\r\n\r\n  onModeChange(mode) {\r\n    //console.log('mode change:', mode);\r\n  },\r\n\r\n  onAudioListsPanelChange(panelVisible) {\r\n    //console.log('audio lists panel visible:', panelVisible);\r\n  },\r\n\r\n  onAudioListsDragEnd(fromIndex, endIndex) {\r\n    //console.log('audio lists drag end:', fromIndex, endIndex);\r\n  },\r\n\r\n  onAudioLyricChange(lineNum, currentLyric) {\r\n    //console.log('audio lyric change:', lineNum, currentLyric);\r\n  },\r\n\r\n  // custom music player root node\r\n  getContainer() {\r\n    return document.body;\r\n  },\r\n\r\n  /**\r\n   * @description get origin audio element instance , you can use it do everything\r\n   * @example\r\n   * audio.playbackRate = 1.5  // set play back rate\r\n   * audio.crossOrigin = 'xxx' // config cross origin\r\n   */\r\n  getAudioInstance(audio) {\r\n    //console.log('audio instance', audio);\r\n  },\r\n\r\n  // transform audio info like return a Promise\r\n\r\n  /**\r\n   * @return\r\n   *  {\r\n   *    src: 'xxx',\r\n   *    filename: 'xxx',\r\n   *    mimeType: 'xxx'\r\n   *  }\r\n   */\r\n  // onBeforeAudioDownload() {\r\n  //   return Promise.resolve({\r\n  //     src: '1.mp3'\r\n  //   })\r\n  // }\r\n};\r\n\r\nclass JkMusicPlayer extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  state = {\r\n    params: options,\r\n  };\r\n  onAddAudio = () => {\r\n    const data = {\r\n      ...this.state.params,\r\n      audioLists: [\r\n        ...this.state.params.audioLists,\r\n        {\r\n          name: \"I'm new here\",\r\n          singer: 'jack',\r\n          cover: 'http://www.lijinke.cn/music/1387583682387727.jpg',\r\n          musicSrc: `http://www.lijinke.cn/music/${Date.now()}.mp3`,\r\n        },\r\n      ],\r\n    };\r\n    this.setState({\r\n      params: data,\r\n    });\r\n  };\r\n  extendsContent = () => {\r\n    const data = {\r\n      ...this.state.params,\r\n      extendsContent: (\r\n        <>\r\n          <button onClick={() => swal(\"I'm extends content\")}>button1</button>\r\n          <button onClick={() => swal(\"I'm extends content\")}>button2</button>\r\n        </>\r\n      ),\r\n    };\r\n    this.setState({\r\n      params: data,\r\n    });\r\n  };\r\n\r\n  onChangeToFirstAudioList = () => {\r\n    const data = {\r\n      ...this.state.params,\r\n      clearPriorAudioLists: true,\r\n      audioLists: audioList1,\r\n    };\r\n    this.setState({\r\n      params: data,\r\n    });\r\n  };\r\n\r\n  onChangeToSecondAudioList = () => {\r\n    const data = {\r\n      ...this.state.params,\r\n      clearPriorAudioLists: true,\r\n      audioLists: audioList2,\r\n    };\r\n    this.setState({\r\n      params: data,\r\n    });\r\n  };\r\n  onAutoPlayMode = () => {\r\n    const data = {\r\n      ...this.state.params,\r\n      autoPlay: !this.state.params.autoPlay,\r\n    };\r\n    this.setState({\r\n      params: data,\r\n    });\r\n  };\r\n\r\n  onAutoPlayInitLoadPlayList = () => {\r\n    const data = {\r\n      ...this.state.params,\r\n      autoPlayInitLoadPlayList: !this.state.params.autoPlayInitLoadPlayList,\r\n    };\r\n    this.setState({\r\n      params: data,\r\n    });\r\n  };\r\n\r\n  onShowGlassBg = () => {\r\n    this.onChangeKey('glassBg');\r\n  };\r\n  onDrag = () => {\r\n    this.onChangeKey('drag');\r\n  };\r\n  onToggleMode = () => {\r\n    this.onChangeKey('toggleMode');\r\n  };\r\n  onSeeked = () => {\r\n    this.onChangeKey('seeked');\r\n  };\r\n  onChangeKey = (key) => {\r\n    const data = {\r\n      ...this.state.params,\r\n      [key]: !this.state.params[key],\r\n    };\r\n    if (key === 'light' || key === 'dark') {\r\n      data.theme = key;\r\n    }\r\n    if (key === 'full' || key === 'mini') {\r\n      data.mode = key;\r\n    }\r\n    this.setState({ params: data });\r\n  };\r\n  showMiniProcessBar = () => {\r\n    this.onChangeKey('showMiniProcessBar');\r\n  };\r\n  showMiniModeCover = () => {\r\n    this.onChangeKey('showMiniModeCover');\r\n  };\r\n  playModeShowTime = () => {\r\n    const data = {\r\n      ...this.state.params,\r\n      playModeShowTime: createRandomNum(200, 2000),\r\n    };\r\n    this.setState({\r\n      params: data,\r\n    });\r\n  };\r\n  changePlayIndex = () => {\r\n    const data = {\r\n      ...this.state.params,\r\n      playIndex: createRandomNum(0, this.state.params.audioLists.length),\r\n    };\r\n    this.setState({\r\n      params: data,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    const data = {\r\n      ...this.state.params,\r\n      clearPriorAudioLists: true,\r\n      audioLists: this.props.audioList,\r\n    };\r\n    this.setState({\r\n      params: data,\r\n    });\r\n    //console.log('component did mount.');\r\n  }\r\n\r\n  componentDidUpdate(oldProps) {\r\n    const newProps = this.props;\r\n    if (oldProps.audioList !== newProps.audioList) {\r\n      const data = {\r\n        ...this.state.params,\r\n        clearPriorAudioLists: true,\r\n        audioLists: this.props.audioList,\r\n        defaultPlayMode: 'singleLoop',\r\n      };\r\n      this.setState({\r\n        params: data,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { params } = this.state;\r\n    //  console.log('params: ', params);\r\n    // console.log('----------------------------------');\r\n    //  console.log(this.props.audioList);\r\n    return (\r\n      <>\r\n        <section className=\"settings\">\r\n          {/*  <button onClick={this.onChangeToFirstAudioList}>\r\n                        change to first audio list ({audioList1.length})\r\n                    </button>\r\n                    <button onClick={this.onChangeToSecondAudioList}>\r\n                        change to second audio list ({audioList2.length})\r\n                    </button>*/}\r\n          {/*    <button onClick={this.onAddAudio}>\r\n                        + add audio ({params.audioLists.length})\r\n                    </button>*/}\r\n          {/*    <button onClick={this.extendsContent}>+ add extends content</button>\r\n                    <button onClick={this.playModeShowTime}>\r\n                        change play mode show time ({params.playModeShowTime} ms)\r\n                    </button>*/}\r\n          {/*     <button onClick={this.changePlayIndex}>\r\n                        change playIndex ({params.playIndex || 0})\r\n                    </button>*/}\r\n          {/*     <label htmlFor=\"glass\">\r\n                        <input type=\"checkbox\" id=\"glass\" onChange={this.onShowGlassBg}/>\r\n                        show glass background\r\n                    </label>*/}\r\n          {/*      <label htmlFor=\"drag\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"drag\"\r\n                            checked={params.drag}\r\n                            onChange={this.onDrag}\r\n                        />\r\n                        drag\r\n                    </label> */}\r\n          {/*     <label htmlFor=\"seeked\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"seeked\"\r\n                            checked={params.seeked}\r\n                            onChange={this.onSeeked}\r\n                        />\r\n                        seeked\r\n                    </label>\r\n                    {/*     <label htmlFor=\"toggle\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"toggle\"\r\n                            checked={params.toggleMode}\r\n                            onChange={this.onToggleMode}\r\n                        />\r\n                        toggle mode\r\n                    </label>*/}\r\n          {/*   <label htmlFor=\"autoPlay\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"autoPlay\"\r\n                            checked={params.autoPlay}\r\n                            onChange={this.onAutoPlayMode}\r\n                        />\r\n                        autoplay\r\n                    </label>\r\n                    <label htmlFor=\"onAutoPlayInitLoadPlayList\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"onAutoPlayInitLoadPlayList\"\r\n                            checked={params.autoPlayInitLoadPlayList}\r\n                            onChange={this.onAutoPlayInitLoadPlayList}\r\n                        />\r\n                        autoplayInitLoadPlayList\r\n                    </label>\r\n                    <label htmlFor=\"showMiniProcessBar\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"showMiniProcessBar\"\r\n                            checked={params.showMiniProcessBar}\r\n                            onChange={this.showMiniProcessBar}\r\n                        />\r\n                        show mini process bar\r\n                    </label>\r\n                    <label htmlFor=\"showMiniModeCover\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"showMiniModeCover\"\r\n                            checked={params.showMiniModeCover}\r\n                            onChange={this.showMiniModeCover}\r\n                        />\r\n                        show cover of mini mode\r\n                    </label>\r\n                    <label htmlFor=\"showProgressLoadBar\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"showProgressLoadBar\"\r\n                            checked={params.showProgressLoadBar}\r\n                            onChange={() => this.onChangeKey('showProgressLoadBar')}\r\n                        />\r\n                        showProgressLoadBar\r\n                    </label>*/}\r\n          {/*  <label htmlFor=\"showPlay\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"showPlay\"\r\n                            checked={params.showPlay}\r\n                            onChange={() => this.onChangeKey('showPlay')}\r\n                        />\r\n                        showPlay\r\n                </label>*/}\r\n          {/*  <label htmlFor=\"showReload\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"showReload\"\r\n                            checked={params.showReload}\r\n                            onChange={() => this.onChangeKey('showReload')}\r\n                        />\r\n                        showReload\r\n                    </label>*/}\r\n          {/* <label htmlFor=\"showDownload\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"showDownload\"\r\n                            checked={params.showDownload}\r\n                            onChange={() => this.onChangeKey('showDownload')}\r\n                        />\r\n                        showDownload\r\n                    </label>*/}\r\n          {/*   <label htmlFor=\"showPlayMode\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"showPlayMode\"\r\n                            checked={params.showPlayMode}\r\n                            onChange={() => this.onChangeKey('showPlayMode')}\r\n                        />\r\n                        showPlayMode\r\n                    </label> */}\r\n          {/*repeat 1, repeat all*/}\r\n          {/* <label htmlFor=\"showThemeSwitch\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"showThemeSwitch\"\r\n                            checked={params.showThemeSwitch}\r\n                            onChange={() => this.onChangeKey('showThemeSwitch')}\r\n                        />\r\n                        showThemeSwitch\r\n                    </label>*/}\r\n          {/*    <label htmlFor=\"showLyric\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"showLyric\"\r\n                            checked={params.showLyric}\r\n                            onChange={() => this.onChangeKey('showLyric')}\r\n                        />\r\n                        showLyric\r\n                    </label>*/}\r\n          {/*    <label htmlFor=\"preload\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"preload\"\r\n                            checked={params.preload}\r\n                            onChange={() => this.onChangeKey('preload')}\r\n                        />\r\n                        preload\r\n                    </label>*/}\r\n          {/*      <label htmlFor=\"remove\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"remove\"\r\n                            checked={params.remove}\r\n                            onChange={() => this.onChangeKey('remove')}\r\n                        />\r\n                        remove\r\n                    </label>*/}\r\n          {/*     <label htmlFor=\"remember\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"remember\"\r\n                            checked={params.remember}\r\n                            onChange={() => this.onChangeKey('remember')}\r\n                        />\r\n                        remember\r\n                    </label>\r\n                    theme :{params.theme} */}\r\n          {/*    <Switch\r\n                        checkedChildren={'D'}\r\n                        unCheckedChildren={'L'}\r\n                        checked={params.theme === 'light'}\r\n                        onChange={(checked) => this.onChangeKey(checked ? 'light' : 'dark')}\r\n                    />\r\n                    mode :{params.mode}\r\n                    <Switch\r\n                        checkedChildren={'M'}\r\n                        unCheckedChildren={'F'}\r\n                        checked={params.mode === 'mini'}\r\n                        onChange={(checked) => this.onChangeKey(checked ? 'mini' : 'full')}\r\n                    />*/}\r\n        </section>\r\n        <ReactJkMusicPlayer {...params} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JkMusicPlayer;\r\n","import React from 'react';\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div className=\"ui \">\r\n      <div className=\"ui active inverted dimmer sixteen wide column loading\">\r\n        <div className=\"ui text active loader\">Preparing...</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Track from './Track';\r\nimport JkMusicPlayer from './JkMusicPlayer';\r\nimport Loading from './Loading';\r\n\r\nconst TrackList = ({ tracks, imageAlbum }) => {\r\n  const [audioList, setAudioList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const playList = tracks.map((track) => {\r\n      const artists = track.artists.map((artist) => artist.name);\r\n      return {\r\n        name: track.name,\r\n        singer: artists.join(),\r\n        cover: track.image || imageAlbum,\r\n        musicSrc: () => {\r\n          return Promise.resolve(track.mp3);\r\n        },\r\n      };\r\n    });\r\n    setAudioList(playList);\r\n  }, [tracks]);\r\n\r\n  const playTrack = (track) => {\r\n    console.log(JSON.stringify(track.image));\r\n    console.log('playTrack', track.mp3);\r\n    const artists = track.artists.map((artist) => artist.name);\r\n    setAudioList([\r\n      {\r\n        name: track.name,\r\n        singer: artists.join(),\r\n        cover: track.image || imageAlbum,\r\n        musicSrc: () => {\r\n          return Promise.resolve(track.mp3);\r\n        },\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const renderedTracks = tracks.map((track, index) => (\r\n    <Track key={index} track={track} index={index} playTrack={playTrack} />\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      {tracks.length > 0 ? (\r\n        <>\r\n          <div role=\"list\" className=\"ui divided relaxed list\">\r\n            {renderedTracks}\r\n          </div>\r\n          <div>\r\n            <JkMusicPlayer audioList={audioList} />\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <Loading />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrackList;\r\n","import './App.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { withRouter } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport Spotify from '../util/Spotify';\r\nimport TrackList from './TrackList';\r\nimport convertMS from '../util/convertMS';\r\nimport Loading from './Loading';\r\n\r\nconst AlbumPage = ({ match }) => {\r\n  const { id } = match.params;\r\n\r\n  const [albumInfo, setAlbumInfo] = useState({});\r\n  const [albumArtists, setAlbumArtists] = useState([]);\r\n  const [albumTracks, setAlbumTracks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getAlbumById(id);\r\n    getAlbumTracksById(id);\r\n  }, []);\r\n\r\n  const getAlbumById = (id) => {\r\n    const accessToken = Spotify.getAccessToken();\r\n    fetch(`https://api.spotify.com/v1/albums/${id}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((jsonResponse) => {\r\n        if (!jsonResponse) {\r\n          // no album in the response\r\n          return null;\r\n        }\r\n\r\n        const filteredAlbumData = {\r\n          id,\r\n          name: jsonResponse.name,\r\n          release_date: jsonResponse.release_date.substring(0, 4),\r\n          total_tracks: jsonResponse.total_tracks,\r\n          artists: jsonResponse.artists,\r\n          image: jsonResponse.images[1].url,\r\n          pupularity: jsonResponse.popularity,\r\n          uri: jsonResponse.uri,\r\n        };\r\n        setAlbumInfo(filteredAlbumData);\r\n        setAlbumArtists(jsonResponse.artists);\r\n        return filteredAlbumData;\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const getAlbumTracksById = (id) => {\r\n    const accessToken = Spotify.getAccessToken();\r\n    fetch(`https://api.spotify.com/v1/albums/${id}/tracks`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((jsonResponse) => {\r\n        if (!jsonResponse.items) {\r\n          // no tracks in the response\r\n          return [];\r\n        }\r\n\r\n        const filteredAlbumTracks = jsonResponse.items.map((track) => ({\r\n          id: track.id,\r\n          name: track.name,\r\n          duration_ms: track.duration_ms,\r\n          mp3: track.preview_url,\r\n          type: track.type,\r\n          uri: track.uri,\r\n          artists: track.artists,\r\n          album: albumInfo.image,\r\n        }));\r\n        setAlbumTracks(filteredAlbumTracks);\r\n        return filteredAlbumTracks;\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const renderedArtists = albumArtists.map((artist) => (\r\n    <span key={artist.id}>\r\n      <Link to={`/artist/${artist.id}`}>{artist.name}</Link>\r\n    </span>\r\n  ));\r\n\r\n  const totalAlbumPlayTime = (tracks) => {\r\n    const totalMS = tracks.reduce((acc, track) => {\r\n      return acc + track.duration_ms;\r\n    }, 0);\r\n    return convertMS(totalMS);\r\n  };\r\n\r\n  return (\r\n    <div className=\"album-page\">\r\n      {albumInfo ? (\r\n        <div className=\"ui grid\">\r\n          <div className=\"row\">\r\n            <div className=\"sixteen wide column\">\r\n              <div className=\"ui grid\">\r\n                <img src={albumInfo.image} className=\"album-image\" />\r\n                <div className=\"album-page-header-info pt-4\">\r\n                  <span className=\"text-2xl\">{albumInfo.name}</span>\r\n                  <div>\r\n                    by <span className=\"text-pink-500\">{renderedArtists}</span>\r\n                  </div>\r\n                  <div>\r\n                    <span>{albumInfo.release_date}</span> ●\r\n                    <span> {totalAlbumPlayTime(albumTracks)} </span> ●\r\n                    <span> {albumTracks.length} tracks </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"sixteen wide column\">\r\n              <div className=\"text-2xl pl-12 text-pink-500 mt-4 mb-4\">Tracks</div>\r\n              <TrackList tracks={albumTracks} imageAlbum={albumInfo.image || null} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Loading />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(AlbumPage);\r\n","import React from 'react';\r\n\r\nconst SearchBar = ({ search }) => {\r\n  return (\r\n    <div className=\"ui action input search-bar\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search albums...\"\r\n        wtx-context=\"6921A6D0-8BA7-4F93-8AD1-F489A90CD245\"\r\n        onChange={(e) => {\r\n          search(e.target.value);\r\n        }}\r\n      />\r\n      <button className=\"ui icon button\">\r\n        <i className=\"search icon\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst AlbumCard = ({ album }) => {\r\n  const renderedArtists = album.artists.map((artist) => (\r\n    <div key={artist.id}>{artist.name}</div>\r\n  ));\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"image\">\r\n        <Link to={`/album/${album.id}`}>\r\n          <img src={album.image} />\r\n        </Link>\r\n      </div>\r\n\r\n      <div className=\"content\">\r\n        <Link to={`/album/${album.id}`}>\r\n          <div className=\"header card-header\">{album.name}</div>\r\n        </Link>\r\n        <div className=\"meta\"></div>\r\n        <div className=\"description\">{renderedArtists}</div>\r\n      </div>\r\n      <div className=\"extra content\">\r\n        <span className=\"right floated\">\r\n          Release year: {album.release_date.substring(0, 4)}\r\n        </span>\r\n        <span className=\"left floated\">{album.total_tracks} tracks</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlbumCard;\r\n","import React from 'react';\r\nimport AlbumCard from './AlbumCard';\r\n\r\nconst AlbumList = ({ albums }) => {\r\n  const renderedAlbums = albums.map((album) => (\r\n    <AlbumCard album={album} key={album.id} />\r\n  ));\r\n  return <div className=\"ui link cards album-list\">{renderedAlbums}</div>;\r\n};\r\n\r\nexport default AlbumList;\r\n","import './App.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Spotify from '../util/Spotify';\r\nimport SearchBar from './SearchBar';\r\nimport AlbumList from './AlbumList';\r\nimport Loading from './Loading';\r\n\r\nfunction SearchPage() {\r\n  const [searchResult, setSearchResult] = useState([]);\r\n\r\n  useEffect(() => {\r\n    search('Enya');\r\n  }, []);\r\n\r\n  const search = (term) => {\r\n    const accessToken = Spotify.getAccessToken();\r\n    fetch(`https://api.spotify.com/v1/search?type=album&q=${term}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((jsonResponse) => {\r\n        if (!jsonResponse.albums) {\r\n          // no album in the response\r\n          return [];\r\n        }\r\n        const filteredAlbums = jsonResponse.albums.items.map((album) => ({\r\n          id: album.id,\r\n          name: album.name,\r\n          release_date: album.release_date,\r\n          total_tracks: album.total_tracks,\r\n          artists: album.artists,\r\n          image: album.images[1].url,\r\n          uri: album.uri,\r\n        }));\r\n        setSearchResult(filteredAlbums);\r\n        return filteredAlbums;\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <SearchBar search={search} />\r\n      {searchResult.length > 0 ? <AlbumList albums={searchResult} /> : <Loading />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchPage;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ArtistCard = ({ artist }) => {\r\n  const renderedGenres = artist.genres.map((genre) => (\r\n    <div className=\"ui pink horizontal label genre\">{genre}</div>\r\n  ));\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"image\">\r\n        <Link to={`/artist/${artist.id}`}>\r\n          <img src={artist.image} className=\"artist-card-image\" />\r\n        </Link>\r\n      </div>\r\n\r\n      <div className=\"content\">\r\n        <Link to={`/artist/${artist.id}`}>\r\n          <div className=\"header card-header text-pink-500\">{artist.name}</div>\r\n        </Link>\r\n        <div className=\"meta\"></div>\r\n        <div className=\"description\">{renderedGenres}</div>\r\n      </div>\r\n      <div className=\"extra content\">\r\n        <span className=\"right floated\">Followers: {artist.followers}</span>\r\n        <span className=\"left floated\">Popularity: {artist.popularity}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ArtistCard;\r\n","import React from 'react';\r\nimport ArtistCard from './ArtistCard';\r\n\r\nconst ArtistList = ({ artists }) => {\r\n  const renderedArtists = artists.map((artist) => (\r\n    <ArtistCard artist={artist} key={artist.id} />\r\n  ));\r\n  return <div className=\"ui link cards related-artists-list\">{renderedArtists}</div>;\r\n};\r\n\r\nexport default ArtistList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { withRouter } from 'react-router';\r\nimport Spotify from '../util/Spotify';\r\nimport TrackList from './TrackList';\r\nimport ArtistList from './ArtistList';\r\n\r\nconst ArtistPage = ({ match }) => {\r\n  const accessToken = Spotify.getAccessToken();\r\n\r\n  const { id } = match.params;\r\n\r\n  const [artistInfo, setArtistInfo] = useState({});\r\n\r\n  const [topTracks, setTopTracks] = useState([]);\r\n\r\n  const [relatedArtists, setRelatedArtists] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getArtistById(id);\r\n    getArtistTopTracksById(id);\r\n    getRelatedArtists(id);\r\n  }, [id]);\r\n\r\n  const getArtistById = (id) => {\r\n    fetch(`https://api.spotify.com/v1/artists/${id}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((jsonResponse) => {\r\n        if (!jsonResponse) {\r\n          // no artist in the response\r\n          return null;\r\n        }\r\n\r\n        const filteredArtistData = {\r\n          id,\r\n          name: jsonResponse.name,\r\n          followers: jsonResponse.followers.total,\r\n          genres: jsonResponse.genres,\r\n          popularity: jsonResponse.popularity,\r\n          type: jsonResponse.type,\r\n          image: jsonResponse.images[1].url,\r\n          uri: jsonResponse.uri,\r\n        };\r\n        setArtistInfo(filteredArtistData);\r\n\r\n        return filteredArtistData;\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const getArtistTopTracksById = (id) => {\r\n    fetch(`https://api.spotify.com/v1/artists/${id}/top-tracks?country=FR`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((jsonResponse) => {\r\n        if (!jsonResponse.tracks) {\r\n          // no track in the response\r\n          return null;\r\n        }\r\n\r\n        const filteredArtistTopTracksData = jsonResponse.tracks.map((track) => {\r\n          return {\r\n            id,\r\n            album: track.album,\r\n            name: track.name,\r\n            popularity: track.popularity,\r\n            album: track.album,\r\n            duration_ms: track.duration_ms,\r\n            type: track.type,\r\n            mp3: track.preview_url,\r\n            uri: track.uri,\r\n            artists: track.artists,\r\n            image: track.album.images[1].url,\r\n          };\r\n        });\r\n        setTopTracks(filteredArtistTopTracksData);\r\n        return filteredArtistTopTracksData;\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const getRelatedArtists = (id) => {\r\n    fetch(`https://api.spotify.com/v1/artists/${id}/related-artists`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((jsonResponse) => {\r\n        if (!jsonResponse.artists) {\r\n          // no artist in the response\r\n          return [];\r\n        }\r\n\r\n        const filteredRelatedArtists = jsonResponse.artists.map((artist) => ({\r\n          id: artist.id,\r\n          name: artist.name,\r\n          genres: artist.genres,\r\n          popularity: artist.popularity,\r\n          followers: artist.followers.total,\r\n          image: artist.images[1].url,\r\n          type: artist.type,\r\n          uri: artist.uri,\r\n        }));\r\n        setRelatedArtists(filteredRelatedArtists);\r\n        return filteredRelatedArtists;\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  /*\r\n  const renderedGenres = artistInfo.genres.map((genre) => (\r\n    <div class=\"ui pink horizontal label genre\">{genre}</div>\r\n  ));*/\r\n\r\n  return (\r\n    <div className=\"artist-page\">\r\n      <div className=\"ui grid container\">\r\n        <div className=\"row\">\r\n          <div className=\"sixteen wide column\">\r\n            <div className=\"ui grid\">\r\n              <img src={artistInfo.image} className=\"artist-image\" />\r\n              <div className=\"artist-page-header-info pt-12\">\r\n                <p className=\"text-4xl\">{artistInfo.name} </p>\r\n                <span className=\"text-xl text-pink-500\"> {artistInfo.type} </span>\r\n                <div className=\"text-xl pt-4\">\r\n                  <span className=\"text-pink-500\">{artistInfo.followers} </span>\r\n                  <span>followers</span> ●\r\n                  <span className=\"text-lg\">{artistInfo.popularity}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"sixteen wide column\">\r\n            <div className=\"text-2xl pl-12 text-pink-500 mt-4 mb-4\">Top tracks</div>\r\n            <TrackList tracks={topTracks} />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"sixteen wide column\">\r\n            <div className=\"text-2xl pl-12 text-pink-500 mt-4 mb-4\">\r\n              Related artists\r\n            </div>\r\n            <ArtistList artists={relatedArtists} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default withRouter(ArtistPage);\r\n","import './App.css';\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport AlbumPage from './AlbumPage';\r\nimport SearchPage from './SearchPage';\r\nimport ArtistPage from './ArtistPage';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <nav className=\"ui inverted segment top fixed menu\">\r\n          <ul className=\"ui inverted pointing secondary menu\">\r\n            <li></li>\r\n            <li className=\"header item\">\r\n              <Link to=\"/search\">Search</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <Switch>\r\n          <Route exact path=\"/album/:id\" component={AlbumPage}>\r\n            <AlbumPage />\r\n          </Route>\r\n          <Route exact path=\"/artist/:id\" component={ArtistPage}>\r\n            <ArtistPage />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <SearchPage />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/tailwind.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const convertMS = (milliseconds) => {\r\n  //Get hours from milliseconds\r\n  var hours = milliseconds / (1000 * 60 * 60);\r\n  var absoluteHours = Math.floor(hours);\r\n  var h = absoluteHours > 9 ? absoluteHours : '0' + absoluteHours;\r\n\r\n  //Get remainder from hours and convert to minutes\r\n  var minutes = (hours - absoluteHours) * 60;\r\n  var absoluteMinutes = Math.floor(minutes);\r\n  var m = absoluteMinutes > 9 ? absoluteMinutes : '0' + absoluteMinutes;\r\n\r\n  //Get remainder from minutes and convert to seconds\r\n  var seconds = (minutes - absoluteMinutes) * 60;\r\n  var absoluteSeconds = Math.floor(seconds);\r\n  var s = absoluteSeconds > 9 ? absoluteSeconds : '0' + absoluteSeconds;\r\n\r\n  return h == '00' ? m + ':' + s : h + ':' + m + ':' + s;\r\n};\r\n\r\nmodule.exports = convertMS;\r\n"],"sourceRoot":""}